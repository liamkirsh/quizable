#create database quizable;
use quizable;

create table user  (
	user_id int not null auto_increment,
	user_name text,
	user_hash varchar(32),
	auth_hash varchar(32),
	reset_limit int,
	primary key(user_id)
);

create table class (
	class_id int not null auto_increment,
	class_hash varchar(32),
	user_hash varchar(32),
	title text,
	description text,
	code varchar(100),
	status varchar(20),
	create_time bigint,
	create_date timestamp,
	primary key(class_id)
);

create table question (
	question_id int not null auto_increment,
	question_hash varchar(32),
	user_hash varchar(32),
	class_hash varchar(32),
	type varchar(10),
	raw_input text,
	qtext text,
	answer mediumtext,
	deadline_nice varchar(100),
	deadline_ts bigint,
	max_attempts int,
	points float,
	deduct_per_attempt float,
	show_answer_when_expired varchar(3),
	margin float,
	abs_answer varchar(3),
	units text,
	attach_bg varchar(3),
	primary key(question_id)
	);

create table enroll (
	enroll_id int not null auto_increment,
	user_hash varchar(32),
	class_hash varchar(32),
	last text,
	first text,
	primary key(enroll_id)
	);

create table answer (
	answer_id int not null auto_increment,
	answer_hash varchar(32),
	question_hash varchar(32),
	student_hash varchar(32),
	class_hash varchar(32),
	answer mediumtext,
	correct varchar(10),
	points float,
	status varchar(10),
	type varchar(10),
	dt_deadline bigint,
	ts bigint,
	ts_nice timestamp,
	primary key(answer_id)
);

create table attach (
	attach_id int not null auto_increment,
	attach_hash varchar(32),
	user_hash varchar(32),
	class_hash varchar(32),
	question_hash varchar(32),
	file_name text,
	full_path text,
	file_ext varchar(10),
	file_type varchar(10),
	primary key(attach_id)
	);


create table comment (
	comment_id int not null auto_increment,
	answer_hash varchar(32),
	comment text,
	primary key(comment_id)
	);

create table sticky (
	sticky_id int not null auto_increment,
	user_hash varchar(32),
	name varchar(100),
	value text,
	primary key(sticky_id)
	);

create table pr_config (
	pr_config_id int not null auto_increment,
	owner_hash varchar(32),
	class_hash varchar(32),
	question_hash_list text,
	points_for_up_vote float,
	points_for_down_vote float,
	points_for_participating float,
	owner_gets_assignments varchar(3),
	time_between_votes float,
	primary key(pr_config_id)
	);


create table pr_question (
	pr_question_id int not null auto_increment,
	pr_hash varchar(32),
	issued_to_hash varchar(32),
	question_hash varchar(32),
	class_hash varchar(32),
	up_votes int,
	down_votes int,
	primary key(pr_question_id)
	);

create table comment (
	comment_id int not null auto_increment,
	comment_hash varchar(32),
	question_hash varchar(32),
	user_hash varchar(32),
	user_name varchar(200),
	comment text,
	date datetime,
	ts bigint,
	primary key(comment_id)
	);

create table vote_time (
	vote_time_id int not null auto_increment,
	user_hash varchar(32),
	ts bigint,
	primary key(vote_time_id)
	);

create table admin (
	admin_id int not null auto_increment,
	user_name text,
	primary key (admin_id)
);

create table grading_comment (
	grading_comment_id int not null auto_increment,
	answer_hash varchar(32),
	comment text,
	primary key (grading_comment_id)
);

create table view (
	view_id int not null auto_increment,
	question_hash varchar(32),
	user_hash varchar(32),
	ts bigint,
	primary key (view_id)
);

create table share (
	share_id int not null auto_increment,
	question_hash_list text,
	primary key (share_id)
);

create table grader (
	grader_id int not null auto_increment,
	class_hash varchar(32),
	question_hash varchar(32),
	grader_share_hash varchar(32),
	primary key (grader_id)
);


create index question_hash_index on view (question_hash);

create index class_hash_index on question (class_hash);
create index user_hash_index on question (user_hash);

#this index is important as student answers come in all mixed up and in
#random orders depending on when students access the site.
#without this, there is significant slowdown when a students
#clicks on a course name and wants to see any open questions.
create index student_hash_index on answer (student_hash);

